import random, networkx as nx, matplotlib.pyplot as pl


def suitable_color_finder(n, color_map):
    red_available = True
    yellow_available = True
    blue_available = True
    for i in list(G.adj[n]):
        if color_map[i - 1] != 0:
            if color_map[i - 1] == 1:
                red_available = False
            elif color_map[i - 1] == 2:
                yellow_available = False
            elif color_map[i - 1] == 3:
                blue_available = False
    if red_available:
        return 1
    elif yellow_available:
        return 2
    else:
        return 3


def color_checker(a, color_map):
    if color_map[a - 1] == 0:
        return True
    else:
        return False



G = nx.Graph()
G.number_of_nodes = random.randint(40, 50)
num = G.number_of_nodes


G.add_nodes_from([n for n in range(1, num + 1)])
k = 0
while True:
    print(k)
    number_of_edges = random.randint(num - 1, 3 * num - 6)
    for i in range(number_of_edges):
        a ,b = random.sample([d for d in range(1, num + 1)], 2)
        G.add_edge(a, b)
    k += 1
    if nx.is_planar(G) and len(list(nx.connected_components(G))) == 1:
        break
    else:
        G.clear()
        G.add_nodes_from([n for n in range(1, num + 1)])


color_map = [1] + [0] * (num - 1)
previous_node = 1
least_elt = (sorted(list(G.adj[1])))[0]
color_map[least_elt - 1] = 2
colored_nodes = 2
while colored_nodes <= num:
    previous_node = least_elt
    color_checker_list = []
    for j in list(G.adj[previous_node]):
        if color_checker(j, color_map):
            color_checker_list.append(j)
    if len(color_checker_list) != 0:
        least_elt = (sorted(color_checker_list))[0]
        new_color = suitable_color_finder(least_elt, color_map)
        color_map[least_elt - 1] = new_color
    else:
        for i in range(2, G.number_of_nodes + 1):
            if color_checker(i, color_map):
                least_elt = i
                new_color = suitable_color_finder(least_elt, color_map)
                color_map[least_elt - 1] = new_color
                break
    colored_nodes += 1


for k in range(len(color_map)):
    if color_map[k] == 1:
        color_map[k] = "red"
    elif color_map[k] == 2:
        color_map[k] = "yellow"
    else:
        color_map[k] = "blue"



sorted_nodes = sorted(G.nodes)
node_colors = [color_map[sorted_nodes.index(node)] for node in G.nodes()]
nx.draw_planar(G, node_color=node_colors, with_labels=True)
pl.show()
